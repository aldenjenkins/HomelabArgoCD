apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: istio-ingress-envoy-middleware
spec:
  workloadSelector:
    labels:
      istio: ingressgateway
  configPatches:
    - applyTo: HTTP_FILTER
      match:
        context: GATEWAY
        listener:
          portNumber: 8443
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
              subFilter:
                name: "envoy.filters.http.router"
      patch:
        operation: INSERT_BEFORE
        value:
          name: envoy.lua
          typed_config:
            "@type": "type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua"
            defaultSourceCode:
              inlineString: |
                -- Request middleware logic goes here
                function envoy_on_request(request_handle)
                  -- Add path-without-query-params
                  local path = request_handle:headers():get(":path")
                  local path_without_query = string.match(path, "([^?]*)")
                  request_handle:headers():add("x-envoy-path-without-query", path_without_query)

                  -- Add client-ip specific header to access log
                  local xff_header = request_handle:headers():get("x-forwarded-for")
                  if xff_header then
                    local first_ip = string.gmatch(xff_header, '(%d+.%d+.%d+.%d+)')()
                    if first_ip then
                      -- Set specific client-ip header for use in logging
                      request_handle:headers():add("client-ip", first_ip)
                    end
                  end
                end

                -- Response middleware logic goes here
                function envoy_on_response(response_handle)
                    response_handle:headers():add("Strict-Transport-Security", "max-age=31536000; includeSubDomains")
                end
---
apiVersion: networking.istio.io/v1alpha3
kind: EnvoyFilter
metadata:
  name: custom-503-error-page
spec:
  workloadSelector:
    labels:
      istio: ingressgateway  # Adjust if you're targeting a sidecar
  configPatches:
    - applyTo: NETWORK_FILTER
      match:
        context: GATEWAY  # Use SIDECAR_INBOUND or SIDECAR_OUTBOUND if needed
        listener:
          portNumber: 8443  # Adjust the port number as necessary
          filterChain:
            filter:
              name: "envoy.filters.network.http_connection_manager"
      patch:
        operation: MERGE
        value:
          name: "envoy.filters.network.http_connection_manager"
          typed_config:
            "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
            local_reply_config:
              mappers:
                - filter:
                    status_code_filter:
                      comparison:
                        op: EQ
                        value:
                          default_value: 503
                          runtime_key: status_code
                  body:
                    inline_string: |
                      <html>
                      <body>
                        <h1>Service Unavailable</h1>
                        <p>Sorry, the service is temporarily unavailable. Please try again later.</p>
                      </body>
                      </html>
                  headers_to_add:
                    - header:
                        key: "Content-Type"
                        value: "text/html; charset=utf-8"
                      append: false
